program (gVar, numGVars, functions) ::= <<
.globals <numGVars>;
<functions; separator="\n">

>>

main (function, args, locals, block) ::= <<
.def main: args=<args>, locals=0
<block>
    halt
>>

function (name, args, locals, block) ::= <<
.def <name>: args=<args>, locals=0
<block>
    ret
>>

block (state) ::= <<
<state; separator="\n">
>>

statement (state) ::= <<
<state>
>>

ifElse (condition, stat1, stat2) ::= <<
ifElse:
<condition>
    brt true
    br false
true:
<stat1>
    br ifElseEnd
false:
<stat2>
ifElseEnd:
>>

for (assign1, binOp, assign2, block) ::= <<
<assign1>
loop:
<binOp>
    brf done
<block>
<assign2>
    br loop
done:
>>

case (binOp) ::= <<
<binOp>
>>

assign (v, index) ::= <<
<v>
    gstore <index>
>>

id_ (id) ::= <<
    gload <id>
>>

int_ (v) ::= <<
    iconst <v>
>>

returnStat (expr) ::= <<
<expr>
    ret
>>

printStat (expr) ::= <<
<expr>
    print
>>

MUL (left, right) ::= <<
<left>
<right>
    imul
>>

ADD (left, right) ::= <<
<left>
<right>
    iadd
>>

SUB (left, right) ::= <<
<left>
<right>
    isub
>>

EQU (left, right) ::= <<
<left>
<right>
    ieq
>>

SMA (left, right) ::= <<
<left>
<right>
    ilt
>>

BIG (left, right) ::= <<
<right>
<left>
    ilt
>>
