program (gVar, numGVars, functions) ::= <<
.globals <numGVars>;
<functions; separator="\n">

>>

main (function, args, locals, block) ::= <<
.def main: args=0, locals=0
<block>
    halt
>>

function (name, args, locals, block) ::= <<
.def <name>: args=0, locals=0
<block>
    ret
>>

block (state) ::= <<
<state; separator="\n">
>>

statement (state) ::= <<
<state>
>>

call (expr) ::= <<
    call <expr>
>>

cond (condition, stat1, stat2, nr) ::= <<
ifElse<nr>:
<condition>
    brt true<nr>
    br false<nr>
true<nr>:
<stat1>
    br ifElseEnd<nr>
false<nr>:
<stat2>
ifElseEnd<nr>:
>>

ifElse (condition, stat1, stat2, nr) ::= <<
if<nr>:
<condition>
    brt true<nr>
    br false<nr>
true<nr>:
<stat1>
    br ifEnd<nr>
false<nr>:
<stat2>
ifEnd<nr>:
>>

for (assign1, binOp, assign2, block, nr) ::= <<
<assign1>
loop<nr>:
<binOp>
    brf done<nr>
<block>
<assign2>
    br loop<nr>
done<nr>:
>>

case (binOp) ::= <<
<binOp>
>>

assign (v, index) ::= <<
<v>
    gstore <index>
>>

id_ (id) ::= <<
    gload <id>
>>

int_ (v) ::= <<
    iconst <v>
>>

true_ () ::= <<
    iconst 1
>>

false_ () ::= <<
    iconst 0
>>

returnStat (expr) ::= <<
<expr>
>>

printStat (expr) ::= <<
<expr>
    print
>>

MUL (left, right, nr) ::= <<
<left>
<right>
    imul
>>

ADD (left, right, nr) ::= <<
<left>
<right>
    iadd
>>

SUB (left, right, nr) ::= <<
<left>
<right>
    isub
>>

EQU (left, right, nr) ::= <<
<left>
<right>
    ieq
>>

NEQ (left, right, nr) ::= <<
<left>
<right>
    ieq
    brt toNull<nr>
    br toOne<nr>
toNull<nr>:
    iconst 0
    br end<nr>
toOne<nr>:
    iconst 1
end<nr>:
>>

SMA (left, right, nr) ::= <<
<left>
<right>
    ilt
>>

BIG (left, right, nr) ::= <<
<right>
<left>
    ilt
>>
